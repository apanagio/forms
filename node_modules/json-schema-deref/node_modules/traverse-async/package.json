{
  "name": "traverse-async",
  "version": "0.1.6",
  "description": "Asynchronously traverse and transform objects by visiting every node on a recursive walk",
  "author": {
    "name": "Awnist",
    "email": "hi@awnist.com",
    "url": "http://awnist.com"
  },
  "main": "./lib/traverse-async.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/awnist/js-traverse-async"
  },
  "homepage": "https://github.com/awnist/js-traverse-async",
  "keywords": [
    "traverse",
    "walk",
    "recursive",
    "map",
    "deep",
    "clone",
    "async",
    "asynchronous",
    "object"
  ],
  "scripts": {
    "prepublish": "coffee -o lib/ -c src/"
  },
  "dependencies": {
    "async": "^0.9.0"
  },
  "readme": "# What is \"traverse-async\"?\n\ntraverse-async is a Javascript/node.js module that asynchronously and recursively walks an object tree.\n\n# Usage\n\n```\n    var traverse = require('traverse-async').traverse;\n\n    traverse(object, function(node, next){\n        console.log(\"Current node\", node);\n        console.log(\"Context object\", this);\n        next();\n    }, function(newObj) {\n        console.log(\"Done!\");\n    });\n```\n\n# The queue object\n\ntraverse-async returns an object on each traverse that allows you to perform functions on the current queue.\n\n## break\n\nKill the whole queue when necessary.\n\n```\n    var queue = traverse(object, function(node, next){\n\n        if (something) { queue.break() }\n\n    });\n\n```\n\n## push\n\nAdd a node to the current queue.\n\n# Context\n\nThe callback has a context (its `this` object) with these attributes:\n\n## this.key\n\nThe name of the key of the present node in its parent.\nThis is `undefined` for the root node.\n\n## this.parent\n\nThe parent of the current node.\nThis is `undefined` for the root node.\n\nthis.parent can be useful when deleting the current node:\n```\n    delete this.parent[this.key]\n```\n\n## this.path\n\nAn array of string keys from the root to the present node\n\n# Examples\n\nWalk an object tree, resolving promises at arbitrary, nested locations:\n\n```\n    var traverse = require('traverse-async').traverse;\n\n    var promises = {};\n\n    traverse.traverse(result, function(value, next) {\n      var key, parent, path;\n      if (isPromise(this.node)) {\n        parent = this.parent;\n        key = this.key;\n        path = this.path.join(\".\");\n        promises[path] = this.node.then(function(value) {\n          parent[key] = value;\n          delete promises[path];\n          if (Object.keys(promises).length === 0) {\n\n            // All promises have been fulfilled\n\n          }\n        }, function(err) {\n\n            // One of the promises errored\n\n        });\n      }\n      return next();\n    }, function() {\n      if (Object.keys(promises).length === 0) {\n\n        // No promises were found or they are already fulfilled.\n\n      }\n    });\n```\n\n# Installation\n\nUse [npm](http://www.npmjs.org/).\n\n    $ npm install traverse-async\n\nOtherwise, you can check traverse-async into your repository and expose it:\n\n    $ git clone git://github.com/awnist/js-traverse-async.git node_modules/traverse-async/\n\ntraverse-async is [UNLICENSED](http://unlicense.org/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/awnist/js-traverse-async/issues"
  },
  "_id": "traverse-async@0.1.6",
  "dist": {
    "shasum": "1662f95226b8db279c025c6ca303bd8081694969"
  },
  "_from": "traverse-async@~0.1.6",
  "_resolved": "https://registry.npmjs.org/traverse-async/-/traverse-async-0.1.6.tgz"
}
